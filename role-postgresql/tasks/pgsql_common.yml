---
- name: Download RPMs
  get_url: 
    url: "http://download.postgresql.org/pub/repos/yum/12/redhat/rhel-7-x86_64/{{ item }}"
    dest: "/tmp"
  with_items: "{{ postgresql_rpms }}"

- name: Install PostgreSQL RPM
  yum:
    name: /tmp/{{ item }}
    state: present
  with_items: "{{ postgresql_rpms }}"

- name: Initialize database
  shell: ./postgresql-12-setup initdb
  args:
    chdir: /usr/pgsql-12/bin/
    creates: "/var/lib/pgsql/12/data/PG_VERSION"

- name: Start PostgreSQL server
  systemd:
    name: postgresql-12
    enabled: yes
    state: started

# When waiting for the DB server to come up, we need to know on which IP we'll wait for the port to become active
# If it's the first time this play runs, listen_addresses will be localhost. In this case, port 5432 will listen on 127.0.0.1
# If the play has run before, listen_addresses will not include localhost, they will already have changed from the master play
# So we check in postgresql.conf to see what it contains
- name: See if localhost is the listen address
  lineinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    regexp: ".*listen_addresses = 'localhost'.*"
    state: absent
  check_mode: true
  register: listentolocalhost

# Depending if server is listening to localhost or not, we set the host to wait_for
- name: Set host_to_wait_for to localhost
  set_fact:
    host_to_wait_for: "127.0.0.1"
  when: listentolocalhost.changed

- name: Set host_to_wait_for to the first IP
  set_fact:
    host_to_wait_for: "{{ public_ip_address }}"
  when: not listentolocalhost.changed

- name: Debug the host to wait for
  debug:
    var: host_to_wait_for

- name: Wait for server to start
  wait_for:
    host: "{{ host_to_wait_for }}"
    port: 5432

- name: Start and enable firewalld
  systemd:
    name: firewalld
    enabled: yes
    state: started

- name: Allow postgresql through firewall
  firewalld:
    service: postgresql
    permanent: yes
    state: enabled
  notify: Reload firewalld

# We need to trigger the firewalld restart now than at the end of tasks, otherwise we'll have a failure when slave tries to replicate from master
- name: Flush handlers to perform firewalld restart
  meta: flush_handlers